// backend/server.js
const express = require('express');
const cors = require('cors');

// Create app
const app = express();

// Parse JSON bodies BEFORE routes
app.use(express.json());

// Allow your Vercel site (set in Railway variables too)
const FRONTEND_URL = process.env.FRONTEND_URL || 'https://ai-prompt-builder-pi.vercel.app';

app.use(
  cors({
    origin: FRONTEND_URL,
    methods: ['GET', 'POST', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
  })
);

// Handle CORS preflight for all routes
app.options('*', cors());

// Health endpoint to test connectivity quickly
app.get('/api/health', (req, res) => res.json({ ok: true }));

// AI generator route that your frontend calls
app.post('/api/generate-prompt', async (req, res) => {
  try {
    const { description = '', userContext = '', additionalContext = '' } = req.body || {};

    // If you have an OpenAI key, try to use it; otherwise fallback to a simple prompt.
    if (process.env.OPENAI_API_KEY) {
      // Node >=18 has global fetch. If your runtime is older, install node-fetch@2 and use it.
      const resp = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: 'You create excellent, safe, well-structured prompts.' },
            {
              role: 'user',
              content:
                `Description: ${description}\n` +
                `User context: ${userContext}\n` +
                `Additional context: ${additionalContext}\n\n` +
                `Write one optimized prompt only.`,
            },
          ],
          temperature: 0.2,
        }),
      });

      const data = await resp.json();
      if (!resp.ok) {
        throw new Error(data?.error?.message || 'OpenAI error');
      }
      const prompt = data?.choices?.[0]?.message?.content?.trim() || 'Generated prompt.';
      return res.json({ prompt });
    }

    // Fallback if no OPENAI_API_KEY is present
    const prompt =
      `Create a comprehensive answer for "${description}". ` +
      `Consider the user context: ${userContext}. ` +
      `Additional context: ${additionalContext}. ` +
      `Structure the output with clear sections, numbered steps, and concrete examples.`;
    res.json({ prompt });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: String(err.message || err) });
  }
});

// Railway/Node port
const port = process.env.PORT || 8080;
app.listen(port, () => {
  console.log('API listening on port', port);
});
